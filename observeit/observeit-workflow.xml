<Workflow name="Qmasters ObserveIT" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
		<Parameter name="identifier" label="Log Source Identifier" required="true" description="The log source identifier to post the events to." />
		<Parameter name="hostname" label="Host Name" required="true" description="URL or IP for the instance." default="https://myObserveIT.com" />
		<Parameter name="client_id" label="Organization Key" required="true" secret="true" description="Can be received through the Developer Portal by selecting Credentials and pressing the Create App button." />
		<Parameter name="client_secret" label="API Secret" required="true" secret="true" description="Can be received through the Developer Portal by selecting Credentials and pressing the Create App button." />

        <Parameter name="time_zone" label="Time Zone" description="The timezone used in ObserveIT." default="UTC" />
        <Parameter name="events_per_poll" label="Events Per Poll" description="Max number of records to return per poll.  Note: a large fetch may cause timeout errors." default="100" />
        <Parameter name="initial_event_fetch_period" label="Initial Event Fetch Period in Days" description="Number of days in the past from which events will be initially retrieved." default="7" />
        <Parameter name="report_type" label="Report Type" required="true" description="The report type to poll. One of: `alert_v0`,`audit_configuration_v0`,`audit_logins_v0`,`audit_saved_sessions_v0`,`audit_session_playback_v0`,`system_events_v0`,`user_command_activity_with_output_v0`,`user_command_output_stream_v0`,`user_dba_activity_v0`,`user_file_activity_v0`,`user_interface_activity_v0`,`user_messaging_actions_activity_v0`,`user_session_v0`." />
        <Parameter name="piis_to_exclude" label="Personal Identifiable Information to Exclude" description="Comma-separated list of Personal Identifiable Information (PII) to exclude." />
        <Parameter name="sleep_time_in_seconds" label="Sleep Time in Seconds" description="The downtime for the connector after it is in sync with the server (Min: 0)." default="20" />
        <Parameter name="debug_mode" label="Debug Mode" description=" Set to `true` in case you want to get debug logs as event logs." default="false" />
    </Parameters>

    <Actions>
		<!-- Clear the log source status before a new workflow run starts. -->
        <ClearStatus />
        <Set path="/fetch_counter" value="1" />
        <Set path="/events_count" value="0" />
        <Set path="/sleep_time" value="${/sleep_time_in_seconds * 1000}"/>
        <Initialize path="/time_format" value="yyyy-MM-dd'T'HH:mm:ss[.SSS]'Z'" />

        <!-- Initialize the risingValue filter for the first run. -->
        <Initialize path="/bookmark" value="${time() - /initial_event_fetch_period * 86400 * 1000}" />

        <Set path="/log_message" value="[Debug]:[Obsereit]: 'risingValue' time for '${/report_type}' to be fetched is: ${/bookmark}" />
        <Log type="INFO" message="${/log_message}" />
        <If condition="${/debug_mode} = true">
            <PostEvent path="/log_message" source="${/identifier}" />
        </If>

        <Set path="/log_message" value="[Debug]:[Obsereit]: Authenticating, fetching bearer token..."/>
        <Log type="INFO" message="${/log_message}" />
        <If condition="${/debug_mode} = true">
            <PostEvent path="/log_message" source="${/identifier}" />
        </If>

		<!-- Get Bearer Token. -->
		<CallEndpoint url="${/hostname}/v2/apis/auth/oauth/token" method="POST" savePath="/response" >
            <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
			<UrlEncodedFormRequestBody>
                <Parameter name="grant_type" value="client_credentials" />
                <Parameter name="client_id" value="${/client_id}" />
                <Parameter name="client_secret" value="${/client_secret}" />
                <Parameter name="scope" value="*" />
            </UrlEncodedFormRequestBody>
		</CallEndpoint>

		<!-- Handle errors. -->
        <If condition="/response/status_code != 200">
            <If condition="/response/status_code = 400">
                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: ${/response/body/_status/message}" />
                <Log type="ERROR" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <Abort reason="${/response}" />
            </If>
            <If condition="/response/status_code = 401">
                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: Authentication error!" />
                <Log type="ERROR" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <Abort reason="${/response}" />
            </If>
            <If condition="/response/status_code = 404">
                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: URL not found!" />
                <Log type="ERROR" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <Abort reason="${/response}" />
            </If>
            <If condition="/response/status_code = 408">
                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: Timeout error!" />
                <PostEvent path="/log_message" source="${/identifier}" />
                <If condition="${/debug_mode} = true">
                    <Log type="ERROR" message="${/log_message}" />
                </If>
                <Abort reason="${/response}" />
            </If>
            <If condition="/response/status_code = 500">
                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: Invalid client_id" />
                <Log type="ERROR" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <Abort reason="${/response}" />
            </If>

            <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: ${/response}" />
            <Log type="ERROR" message="${/log_message}" />
            <If condition="${/debug_mode} = true">
                <PostEvent path="/log_message" source="${/identifier}" />
            </If>
            <Abort reason="${/response}" />
        </If>

        <Set path="/log_message" value="[Debug]:[Obsereit]: Bearer token received!" />
        <Log type="INFO" message="${/log_message}" />
        <If condition="${/debug_mode} = true">
            <PostEvent path="/log_message" source="${/identifier}" />
        </If>
        <!-- Save the bearer token. -->
		<Set path="/bearer_token" value="${/response/body/access_token}" />

        <!-- Handle PII. -->
        <Split value="${/piis_to_exclude}" delimiter="," savePath="/piis_to_exclude" />

        <If condition="count(/piis_to_exclude) > 0">
            <!-- Create a list of PIIs to exclude. -->
            <Set path="/log_message" value="[Debug]:[Obsereit]: Fetching fields for the report type '${/report_type}'..." />
            <Log type="INFO" message="${/log_message}" />
            <If condition="${/debug_mode} = true">
                <PostEvent path="/log_message" source="${/identifier}" />
            </If>

            <!-- Get the report type's fields. -->
            <CallEndpoint url="${/hostname}/v2/apis/report;realm=ObserveIT/reports/${/report_type}" method="GET" savePath="/response" >
                <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                <BearerAuthentication token="${/bearer_token}" />
            </CallEndpoint>

            <!-- Handle errors. -->
            <If condition="/response/status_code != 200">
                <If condition="/response/status_code = 401">
                    <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} report fields, reason: Authentication error!" />
                    <Log type="ERROR" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                    <Abort reason="${/response}" />
                </If>
                <If condition="/response/status_code = 404">
                    <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} report fields, reason: URL not found!" />
                    <Log type="ERROR" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                    <Abort reason="${/response}" />
                </If>
                <If condition="/response/status_code = 408">
                    <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} report fields, reason: Timeout error!" />
                    <Log type="ERROR" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                    <Abort reason="${/response}" />
                </If>

                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} report fields, reason: ${/response}" />
                <Log type="ERROR" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <Abort reason="${/response}" />
            </If>

            <!-- Create an empty string that will hold the fields to fetch. -->
            <Set path="/fields" value="" />

            <!-- Iterate over all the fields within a report type and exclude those that are a PII from `fields`. -->
            <ForEach item="/column" items="/response/body/data[0]/columns">
                <Set path="/is_pii" value="false" />

                <!-- Check if the current field is a PII. -->
                <ForEach item="/pii_to_exclude" items="/piis_to_exclude">
                    <If condition="'${/column/name}' = '${/pii_to_exclude}'">
                        <Set path="/is_pii" value="true" />
                    </If>
                </ForEach>

                <!-- If the current field isn't a PII, append it to the string. -->
                <If condition="${/is_pii} = false">
                    <If condition="${count(/fields) = 0}">
                        <Set path="/fields" value="${/column/name}" />
                    </If>
                    <Else>
                        <Set path="/fields" value="${/fields},${/column/name}" />
                    </Else>
                </If>
            </ForEach>
        </If>

        <Set path="/log_message" value="[Debug]:[Obsereit]: The following fields will be fetched for the report type '${/report_type}': ${/fields}." />
        <Log type="INFO" message="${/log_message}" />
        <If condition="${/debug_mode} = true">
            <PostEvent path="/log_message" source="${/identifier}" />
        </If>

        <!-- Pagination handling: aslong as events are returned, keep fetching data. -->
        <While condition="true">
            <Set path="/start_time" value="${time()}" />
            <Set path="/log_message" value="[Debug]:[Obsereit]: Running fetch number ${/fetch_counter} for '${/report_type}'..." />
            <Log type="INFO" message="${/log_message}" />
            <If condition="${/debug_mode} = true">
                <PostEvent path="/log_message" source="${/identifier}" />
            </If>

            <!-- Get the reports. -->
            <CallEndpoint url="${/hostname}/v2/apis/report;realm=ObserveIT/reports/${/report_type}/stream" method="GET" savePath="/response" >
                <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                <BearerAuthentication token="${/bearer_token}" />
                <QueryParameter name="fields" value="${/fields}" />
                <QueryParameter name="limit" value="${/events_per_poll}" />
                <QueryParameter name="since" value="${/bookmark}" />
            </CallEndpoint>

            <Set path="/log_message" value="[Debug]:[Obsereit]: Done fetch request, got status code: ${/response/status_code}." />
            <Log type="INFO" message="${/log_message}" />
            <If condition="${/debug_mode} = true">
                <PostEvent path="/log_message" source="${/identifier}" />
            </If>

            <If condition="/response/status_code = 200">
                <!-- Handle a succesful response. -->
                <Set path="/events_count" value="${count(/response/body/data)}" />
                <Set path="/fetch_counter" value="${/fetch_counter + 1}" />

                <Set path="/log_message" value="[Debug]:[Obsereit]: ${/events_count} events for were fetched for '${/report_type}'." />
                <Log type="INFO" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>

                <!-- If there were any events, post them and update the risingValue timer to the latest one. -->
                <If condition="${/events_count} > 0">
                    <Set path="/log_message" value="[Debug]:[Obsereit]: Posting fetched events..." />
                    <Log type="INFO" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>

                    <PostEvents path="/response/body/data" source="${/identifier}" />

                    <!-- Update the risingValue for next run. -->
                    <Set path="/last_index" value="${/events_count - 1}"/>
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${/response/body/data[${/last_index}]/risingValue}" savePath="/last_risingValue" />
                    <FormatDate pattern="${/time_format}" timeZone="${/time_zone}" time="${/last_risingValue}" savePath="/bookmark" />
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${/bookmark}" savePath="/bookmark" />

                    <Set path="/log_message" value="[Debug]:[Obsereit]: 'risingValue' time for '${/report_type}' updated to: ${/bookmark}" />
                    <Log type="INFO" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                </If>

                <Set path="/log_message" value="[Debug]:[Obsereit]: Done fetch period, total time in milliseconds is: ${time() - /start_time}" />
                <Log type="INFO" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>

                <If condition="${/events_per_poll} > ${/events_count}">
                    <Set path="/log_message" value="[Debug]:[Obsereit]: Connecter is in sync with ObserveIT server, reseting fetch counter and going to sleep for ${/sleep_time_in_seconds} seconds..." />
                    <Log type="INFO" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>

                    <Set path="/fetch_counter" value="1" />
                    <Sleep duration="${/sleep_time}" />
                </If>
            </If>
            <ElseIf condition="/response/status_code = 401">
                <!-- If the bearer token has expired fetch a new one.  -->
                <Set path="/log_message" value="[Debug]:[Obsereit]: Bearer token expired, fetching new token..." />
                <Log type="INFO" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>

                <!-- Get Bearer Token. -->
                <CallEndpoint url="${/hostname}/v2/apis/auth/oauth/token" method="POST" savePath="/response" >
                    <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                    <UrlEncodedFormRequestBody>
                        <Parameter name="grant_type" value="client_credentials" />
                        <Parameter name="client_id" value="${/client_id}" />
                        <Parameter name="client_secret" value="${/client_secret}" />
                        <Parameter name="scope" value="*" />
                    </UrlEncodedFormRequestBody>
                </CallEndpoint>

                <!-- Handle errors. -->
                <If condition="/response/status_code != 200">
                    <If condition="/response/status_code = 400">
                        <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: ${/response/body/_status/message}" />
                        <Log type="ERROR" message="${/log_message}" />
                        <If condition="${/debug_mode} = true">
                            <PostEvent path="/log_message" source="${/identifier}" />
                        </If>
                        <Abort reason="${/response}" />
                    </If>
                    <If condition="/response/status_code = 401">
                        <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: Authentication error!" />
                        <Log type="ERROR" message="${/log_message}" />
                        <If condition="${/debug_mode} = true">
                            <PostEvent path="/log_message" source="${/identifier}" />
                        </If>
                        <Abort reason="${/response}" />
                    </If>
                    <If condition="/response/status_code = 404">
                        <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: URL not found!" />
                        <Log type="ERROR" message="${/log_message}" />
                        <If condition="${/debug_mode} = true">
                            <PostEvent path="/log_message" source="${/identifier}" />
                        </If>
                        <Abort reason="${/response}" />
                    </If>
                    <If condition="/response/status_code = 408">
                        <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: Timeout error!" />
                        <Log type="ERROR" message="${/log_message}" />
                        <If condition="${/debug_mode} = true">
                            <PostEvent path="/log_message" source="${/identifier}" />
                        </If>
                        <Abort reason="${/response}" />
                    </If>
                    <If condition="/response/status_code = 500">
                        <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: Invalid client_id" />
                        <Log type="ERROR" message="${/log_message}" />
                        <If condition="${/debug_mode} = true">
                            <PostEvent path="/log_message" source="${/identifier}" />
                        </If>
                        <Abort reason="${/response}" />
                    </If>

                    <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get token, reason: ${/response}" />
                    <Log type="ERROR" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                    <Abort reason="${/response}" />
                </If>

                <Set path="/log_message" value="[Debug]:[Obsereit]: Bearer token received!" />
                <Log type="INFO" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <!-- Save the bearer token. -->
                <Set path="/bearer_token" value="${/response/body/access_token}" />
            </ElseIf>
            <Else>
                <!-- If an unexpected error was received from the API -->
                <If condition="/response/status_code = 400">
                    <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} reports, reason: ${/response}/body/_status/message" />
                    <Log type="ERROR" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                    <Abort reason="${/response}" />
                </If>
                <If condition="/response/status_code = 404">
                    <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} reports, reason: URL not found!" />
                    <Log type="ERROR" message="${/log_message}" />
                    <If condition="${/debug_mode} = true">
                        <PostEvent path="/log_message" source="${/identifier}" />
                    </If>
                    <Abort reason="${/response}" />
                </If>

                <Set path="/log_message" value="[ERROR]:[Obsereit]: Abort at get ${/report_type} reports, reason: ${/response}" />
                <Log type="ERROR" message="${/log_message}" />
                <If condition="${/debug_mode} = true">
                    <PostEvent path="/log_message" source="${/identifier}" />
                </If>
                <Abort reason="${/response}" />
            </Else>
        </While>
	</Actions>

    <Tests>
        <DNSResolutionTest host="${/hostname}" />
        <TCPConnectionTest host="${/hostname}" />
        <HTTPConnectionThroughProxyTest url="${/hostname}" expectedResponseStatus="404" />
    </Tests>
</Workflow>
